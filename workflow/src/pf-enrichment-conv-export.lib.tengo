ll := import("@platforma-sdk/workflow-tengo:ll")
canonical := import("@platforma-sdk/workflow-tengo:canonical")

getColumns := func(abundanceSpec, inputType, min, max, cutoff, downsampling, 
                  conditionOrder, blockId, ...opts) {
  ll.assert(len(opts) <= 1, "expected at most one options map")

  specLabel := "Maximum " + inputType + " Enrichment"

  if len(opts) == 1 {
    specLabel = opts[0].label
  }

  return {
    axes: [
      {
        column: "elementId",
        spec: abundanceSpec.axesSpec[1]
      }
      ],
    columns: [
      {
        column: "Enrichment",
        id: "enrichment",
        allowNA: true,
        spec: {
          name: "pl7.app/vdj/enrichment",
          valueType: "Double",
          domain: {
            "pl7.app/downsampling": canonical.encode(downsampling),
            "pl7.app/conditionsOrder": canonical.encode(conditionOrder),
            "pl7.app/blockId": blockId,
            "pl7.app/comparison": specLabel
          },
          annotations: {
            "pl7.app/label": specLabel,
            "pl7.app/table/orderPriority": "9000",
            "pl7.app/table/visibility": "default",
            "pl7.app/min": min,
            "pl7.app/max": max,
            "pl7.app/isScore": "true",
            "pl7.app/score/rankValues": "increasing",
            "pl7.app/score/defaultCutoff": cutoff,
            "pl7.app/format": ".2f"
          }
        }
      }],
    storageFormat: "Binary",
    partitionKeyLength: 0
  }
}

export ll.toStrict({
	getColumns: getColumns
})
