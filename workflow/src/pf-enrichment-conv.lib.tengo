ll := import("@platforma-sdk/workflow-tengo:ll")
maps := import("@platforma-sdk/workflow-tengo:maps")
strings := import("@platforma-sdk/workflow-tengo:strings")

getColumns := func(countsSpec, conditionOrder) {
  columns := []
  for idx, condition in conditionOrder {
    columns = columns + [{
                          column: "Frequency " + condition,
                          id: strings.substituteSpecialCharacters("frequency_" + condition),
                          allowNA: true,
                          spec: {
                            name: "pl7.app/vdj/frequency",
                            valueType: "Double",
                            domain: {},
                            annotations: {
                              "pl7.app/label": "Frequency " + condition,
                              // add isScore only in exports to ease plots
                              // "pl7.app/vdj/isScore": "true",
                              "pl7.app/table/orderPriority": "8000",
                              "pl7.app/table/visibility": "optional",
                              "pl7.app/format": ".2e"
                            }
                          }
                        }]
    if idx != 0 {
      for conditionBaseline in conditionOrder[0:idx] {
        columns = columns + [{
                            column: "Enrichment " + condition + " vs " + conditionBaseline,
                            id: strings.substituteSpecialCharacters("enrichment_" + condition + "_" + conditionBaseline),
                            allowNA: true,
                            spec: {
                              name: "pl7.app/vdj/enrichment",
                              valueType: "Double",
                              domain: {},
                              annotations: {
                                "pl7.app/label": "Enrichment " + condition + " vs " + conditionBaseline,
                                // add isScore only in exports to ease plots
                                // "pl7.app/vdj/isScore": "true",
                                "pl7.app/table/orderPriority": "9000",
                                "pl7.app/table/visibility": "default",
                                "pl7.app/format": ".2f"
                              }
                            }
                          }]
      }
    }
  }
    
  return {
    axes: [
      {
        column: "elementId",
        spec: maps.deepMerge(countsSpec.axesSpec[1], {
          annotations: {
            "pl7.app/table/visibility": "default"
          }
        })
      }
    ],
    columns: columns,
    storageFormat: "Binary",
    partitionKeyLength: 0
  }
}

export ll.toStrict({
	getColumns: getColumns
})
