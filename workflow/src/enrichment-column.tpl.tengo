self := import("@platforma-sdk/workflow-tengo:tpl")
ll := import("@platforma-sdk/workflow-tengo:ll")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
text := import("text")

pfEnrichmentConvExport := import(":pf-enrichment-conv-export")

self.defineOutputs("columnSpec", "columnData")

self.body(func(args) {
    min := args.min
    max := args.max
    cutoff := args.cutoff
    downsampling := args.downsampling
    abundanceSpec := args.abundanceSpec
    inputType := args.inputType
    topEnrichedColCsv := args.topEnrichedColCsv
    conditionOrder := args.conditionOrder
    blockId := args.blockId
    specOpts := args.specOpts

    enrichmentImportParamsExport := undefined
    // In case of additional exports we will modify some spec values using specOpts
    if specOpts != undefined {
        enrichmentImportParamsExport = pfEnrichmentConvExport.getColumns(abundanceSpec, 
                                                                inputType,
                                                                string(min.getData()),
                                                                string(max.getData()),
                                                                string(cutoff.getData()),
                                                                downsampling,
                                                                conditionOrder,
                                                                blockId,
                                                                specOpts)
    } else {
        enrichmentImportParamsExport = pfEnrichmentConvExport.getColumns(abundanceSpec, 
                                                                inputType,
                                                                string(min.getData()),
                                                                string(max.getData()),
                                                                string(cutoff.getData()),
                                                                downsampling,
                                                                conditionOrder,
                                                                blockId)
    }

    exportFile := xsv.importFile(topEnrichedColCsv, 
                                "csv",
                                enrichmentImportParamsExport,
                                { cpu: 1, mem: "16GiB" })

    // Make trace with condition order (max enrichment will differ depending on the order)
    // Downsampling is also important to add to the label
	label := ""
	if downsampling.type == "hypergeometric" {
		if downsampling.valueChooser == "fixed" {
			label = "Downsampling: " + downsampling.type + " - " + downsampling.valueChooser + " - " + string(downsampling.n)
		} else {
			label = "Downsampling: " + downsampling.type + " - " + downsampling.valueChooser
		}
	} else {
		label = "Downsampling: " + downsampling.type
	}
    // Add two traces, one for the condition order and one for the downsampling
    trace := pSpec.makeTrace(abundanceSpec,
        {
            type: "milaboratories.clonotype-enrichment.condition-order",
            importance: 35,
            label: text.join(conditionOrder, " â†’ ")
        },
        {
            type: "milaboratories.clonotype-enrichment.downsampling",
            importance: 30,
            label: label
        })

    return {
        columnSpec: trace.inject(exportFile["enrichment.spec"]),
        columnData: exportFile["enrichment.data"]
    }
})
