// "hello world"
wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets:= import("@platforma-sdk/workflow-tengo:assets")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
ptransformSw := assets.importSoftware("@platforma-open/milaboratories.software-ptransform:main")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")
render := import("@platforma-sdk/workflow-tengo:render")
json := import("json")
buildExportsTpl := assets.importTemplate(":build-exports")

pfEnrichmentConv := import(":pf-enrichment-conv")
pfEnrichmentConvExport := import(":pf-enrichment-conv-export")
pfBubbleConv := import(":pf-bubble-conv")
pfStackedConv := import(":pf-stacked-conv")


wf.prepare(func(args){

	bundleBuilder := wf.createPBundleBuilder()
	bundleBuilder.addAnchor("main", args.abundanceRef) 

	bundleBuilder.addSingle(args.conditionColumnRef)

	return {
		columns: bundleBuilder.build()
	}
})

wf.body(func(args) {

	// Load input parameters and related variables
	blockId := wf.blockId().getDataAsJson()
	columns := args.columns

	abundanceSpec := columns.getSpec(args.abundanceRef)

	clonoTable := columns.xsvTableBuilder()
	clonoTable.add(args.abundanceRef, {header: "abundance"})
	clonoTable.add(args.conditionColumnRef, {header: "condition"})
	clonoTable.setAxisHeader(abundanceSpec.axesSpec[0].name, "sampleId")
	clonoTable.setAxisHeader(abundanceSpec.axesSpec[1].name, "elementId")
	clonoTable = clonoTable.build("csv")

	conditionOrder := args.conditionOrder
	enrichmentThreshold := args.enrichmentThreshold
	condition := args.roundExport
	if condition == undefined {
		condition = conditionOrder[len(conditionOrder) - 1]
	}
	reference := conditionOrder[0]




	// Check if inputs are individual clonotypes or clusters
	inputType := "Unknown"
	if abundanceSpec.axesSpec[1].name == "pl7.app/vdj/clusterId" {
		inputType = "Cluster"
	} else if abundanceSpec.axesSpec[1].name == "pl7.app/vdj/clonotypeKey" || 
				abundanceSpec.axesSpec[1].name == "pl7.app/vdj/scClonotypeKey" {
		inputType = "Clonotype"
	}
	
	//////////// Enrichment analysis ////////////
	// Run enrichment script
	calculateEnrichment := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.clonotype-enrichment.software:calculate-enrichment")).
		addFile("inputFile.csv", clonoTable).
		arg("--input_data").arg("inputFile.csv").
		arg("--conditions").arg(string(conditionOrder)).
		arg("--enrichment").arg("enrichment_results.csv").
		arg("--bubble").arg("bubble_data.csv").
		arg("--top_enriched").arg("top_enriched.csv").
		arg("--top_20").arg("top_20.csv").
		arg("--min_enrichment").arg(string(enrichmentThreshold)).
		arg("--highest_enrichment_clonotype").arg("highest_enrichment_clonotype.csv").
		saveFile("enrichment_results.csv").
		saveFile("bubble_data.csv").
		saveFile("top_enriched.csv").
		saveFile("top_20.csv").
		saveFile("highest_enrichment_clonotype.csv").
		printErrStreamToStdout().
		saveStdoutContent().
		cache(24 * 60 * 60 * 1000).
		run()

	// Convert script outputs to Pframes
	enrichCsv := calculateEnrichment.getFile("enrichment_results.csv")
	EnrichmentImportParams := pfEnrichmentConv.getColumns(abundanceSpec)
	enrichmentPf := xsv.importFile(enrichCsv, "csv", EnrichmentImportParams)

	bubbleImportParams := pfBubbleConv.getColumns(abundanceSpec)
	bubblePf := xsv.importFile(calculateEnrichment.getFile("bubble_data.csv"), "csv", bubbleImportParams)

	lineImportParams := pfStackedConv.getColumns(abundanceSpec)
	linePf := xsv.importFile(calculateEnrichment.getFile("top_20.csv"), "csv", lineImportParams)

	stackedImportParams := pfStackedConv.getColumns(abundanceSpec)
	stackedPf := xsv.importFile(calculateEnrichment.getFile("top_enriched.csv"), "csv", stackedImportParams)

	// Calculate annotation values
	topEnrichedColCsv := calculateEnrichment.getFile("highest_enrichment_clonotype.csv")

	annotationValues := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.clonotype-enrichment.software:calculate-annotations")).
		addFile("inputFile.csv", topEnrichedColCsv).
		arg("inputFile.csv").
		saveFileContent("enrichment_min.txt"). 
		saveFileContent("enrichment_max.txt").
		saveFileContent("enrichment_75.txt").
		printErrStreamToStdout().
		saveStdoutContent().
		cache(24 * 60 * 60 * 1000).
		run()

	min := annotationValues.getFileContent("enrichment_min.txt")
	max := annotationValues.getFileContent("enrichment_max.txt")
	cutoff := annotationValues.getFileContent("enrichment_75.txt")

	buildExports := render.create(buildExportsTpl, {
		abundanceSpec: abundanceSpec,
		inputType: inputType,
		topEnrichedColCsv: topEnrichedColCsv,
		min: min,
		max: max,
		cutoff: cutoff
	})

	exports := buildExports.output("exports")

	return {
		outputs: {
			enrichmentPf: pframes.exportFrame(enrichmentPf),
			bubblePf: pframes.exportFrame(bubblePf),
			stackedPf: pframes.exportFrame(stackedPf),
			linePf: pframes.exportFrame(linePf)//,
			// clonotypeMapPf: pframes.exportFrame(clonotypeMapPf)
		},
		exports: {
			pf: exports
		}
	}
	
})

