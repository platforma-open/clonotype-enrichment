// "hello world"
wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets:= import("@platforma-sdk/workflow-tengo:assets")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
render := import("@platforma-sdk/workflow-tengo:render")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")
json := import("json")
strings := import("@platforma-sdk/workflow-tengo:strings")
text := import("text")

buildExportsTpl := assets.importTemplate(":build-exports")
downsamplingSw := assets.importSoftware("@platforma-open/milaboratories.clonotype-enrichment.software:downsampling")

pfEnrichmentConv := import(":pf-enrichment-conv")
pfFrequencyConv := import(":pf-frequency-conv")
pfBubbleConv := import(":pf-bubble-conv")
pfStackedConv := import(":pf-stacked-conv")

wf.prepare(func(args){

	bundleBuilder := wf.createPBundleBuilder()
	bundleBuilder.addAnchor("main", args.abundanceRef) 
	bundleBuilder.addSingle(args.conditionColumnRef)

	return {
		columns: bundleBuilder.build()
	}
})

wf.body(func(args) {

	// Load input parameters and related variables
	blockId := wf.blockId().getDataAsJson()
	columns := args.columns
	conditionOrder := args.conditionOrder
	abundanceSpec := columns.getSpec(args.abundanceRef)
	downsampling:= args.downsampling

	// Make trace (Frequencies are always the same, so we don't need to add the condition order)
	// Downsampling will cause it to change, so lets add it
	label := ""
	if downsampling.type == "hypergeometric" {
		if downsampling.valueChooser == "fixed" {
			label = "Downsampling: " + downsampling.type + " - " + downsampling.valueChooser + " - " + string(downsampling.n)
		} else {
			label = "Downsampling: " + downsampling.type + " - " + downsampling.valueChooser
		}
	} else {
		label = "Downsampling: " + downsampling.type
	}

    trace := pSpec.makeTrace(abundanceSpec,
        {
            type: "milaboratories.clonotype-enrichment",
            importance: 30,
            label: label
        })

	// Get abundance table
	cloneTable := pframes.csvFileBuilder() 
	cloneTable.add(columns.getColumn(args.abundanceRef), {header: "abundance"})
	cloneTable.add(columns.getColumn(args.conditionColumnRef), {header: "condition"})
	cloneTable.setAxisHeader(abundanceSpec.axesSpec[0].name, "sampleId")
	cloneTable.setAxisHeader(abundanceSpec.axesSpec[1].name, "elementId")
	cloneTable.mem("32GiB")
	cloneTable.cpu(1)
	cloneTable = cloneTable.build()

	runDownsampling := exec.builder().
		software(downsamplingSw).
		mem("32GiB").
		cpu(8).
		writeFile("downsampling.json", json.encode(downsampling)).
		addFile("input.csv", cloneTable).
		saveFile("result.csv").
		run()
	downsamplingFile := runDownsampling.getFile("result.csv")
	
	// Check if inputs are individual clonotypes or clusters
	inputType := "Unknown"
	if abundanceSpec.axesSpec[1].name == "pl7.app/vdj/clusterId" {
		inputType = "Cluster"
	} else if abundanceSpec.axesSpec[1].name == "pl7.app/vdj/clonotypeKey" || 
				abundanceSpec.axesSpec[1].name == "pl7.app/vdj/scClonotypeKey" {
		inputType = "Clonotype"
	}
	
	//////////// Enrichment analysis ////////////
	// Run enrichment script
	calculateEnrichment := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.clonotype-enrichment.software:calculate-enrichment")).
		mem("32GiB").
		cpu(8).
		addFile("inputFile.csv", downsamplingFile).
		arg("--input_data").arg("inputFile.csv").
		arg("--conditions").arg(string(conditionOrder)).
		arg("--enrichment").arg("enrichment_results.csv").
		arg("--bubble").arg("bubble_data.csv").
		arg("--top_enriched").arg("top_enriched.csv").
		arg("--top_20").arg("top_20.csv").
		// arg("--min_enrichment").arg(string(enrichmentThreshold)).
		arg("--highest_enrichment_clonotype").arg("highest_enrichment_clonotype.csv").
		saveFile("enrichment_results.csv").
		saveFile("bubble_data.csv").
		saveFile("top_enriched.csv").
		saveFile("top_20.csv").
		saveFile("highest_enrichment_clonotype.csv").
		printErrStreamToStdout().
		saveStdoutContent().
		cache(24 * 60 * 60 * 1000).
		run()

	// Convert script outputs to Pframes
	enrichCsv := calculateEnrichment.getFile("enrichment_results.csv")
	enrichmentImportParams := pfEnrichmentConv.getColumns(abundanceSpec, conditionOrder)
	enrichmentPf := xsv.importFile(enrichCsv, "csv", enrichmentImportParams,
									{ cpu: 1, mem: "32GiB" })

	bubbleImportParams := pfBubbleConv.getColumns(abundanceSpec)
	bubblePf := xsv.importFile(calculateEnrichment.getFile("bubble_data.csv"), "csv", bubbleImportParams,
							{ cpu: 1, mem: "32GiB" })

	lineImportParams := pfStackedConv.getColumns(abundanceSpec)
	linePf := xsv.importFile(calculateEnrichment.getFile("top_20.csv"), "csv", lineImportParams,
							{ cpu: 1, mem: "32GiB" })

	stackedImportParams := pfStackedConv.getColumns(abundanceSpec)
	stackedPf := xsv.importFile(calculateEnrichment.getFile("top_enriched.csv"), "csv", stackedImportParams,
								{ cpu: 1, mem: "32GiB" })

	topEnrichedColCsv := calculateEnrichment.getFile("highest_enrichment_clonotype.csv")

	// Export frequency
	frequencyImportParams := pfFrequencyConv.getColumns(abundanceSpec, conditionOrder,
														inputType, downsampling,
														blockId)
	frequencyPf := xsv.importFile(enrichCsv, "csv", frequencyImportParams,
								{ cpu: 1, mem: "32GiB" })
	// Prepare pFrame to be exported
    exportsFreq := pframes.pFrameBuilder()
	for condition in conditionOrder {
		colId := strings.substituteSpecialCharacters("frequency_" + condition)
		exportsFreq.add(
			"Frequency " + condition, 
			trace.inject(frequencyPf[colId + ".spec"]), 
			frequencyPf[colId + ".data"]
		)
	}

	//////////// Calculate annotation values ////////////
	annotationValues := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.clonotype-enrichment.software:calculate-annotations")).
		mem("16GiB").
		cpu(1).
		addFile("inputFile.csv", topEnrichedColCsv).
		arg("inputFile.csv").
		saveFileContent("enrichment_min.txt"). 
		saveFileContent("enrichment_max.txt").
		saveFileContent("enrichment_75.txt").
		printErrStreamToStdout().
		saveStdoutContent().
		cache(24 * 60 * 60 * 1000).
		run()

	min := annotationValues.getFileContent("enrichment_min.txt")
	max := annotationValues.getFileContent("enrichment_max.txt")
	cutoff := annotationValues.getFileContent("enrichment_75.txt")

	buildExports := render.create(buildExportsTpl, {
		abundanceSpec: abundanceSpec,
		inputType: inputType,
		topEnrichedColCsv: topEnrichedColCsv,
		min: min,
		max: max,
		cutoff: cutoff,
		downsampling: downsampling,
		conditionOrder: conditionOrder,
		blockId: blockId
	})

	exports := buildExports.output("exports")

	return {
		outputs: {
			enrichmentPf: pframes.exportFrame(enrichmentPf),
			bubblePf: pframes.exportFrame(bubblePf),
			stackedPf: pframes.exportFrame(stackedPf),
			linePf: pframes.exportFrame(linePf)//,
			// clonotypeMapPf: pframes.exportFrame(clonotypeMapPf)
		},
		exports: {
			pf: exports,
			frequency: exportsFreq.build()    
		}
	}	
})