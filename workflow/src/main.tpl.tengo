// "hello world"
wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets:= import("@platforma-sdk/workflow-tengo:assets")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
pframes := import("@platforma-sdk/workflow-tengo:pframes")

pfEnrichmentConv := import(":pf-enrichment-conv")

wf.prepare(func(args){

	// // below solution not working currently
	// metaRefs := {}

	// i := 0
	// for metaRef in args.roundColumn {
	// 	metaRefs["metaRef" + i ] = wf.resolve(metaRef, { errIfMissing: true })
	// 	i = i + 1
	// }

	return {
		resolvedInput: wf.resolve(args.countsRef, { errIfMissing: true }),
		resolvedRoundColumn: wf.resolve(args.roundColumn),
		metaRefs: args.roundColumn
	}
})

wf.body(func(args) {
	blockId := wf.blockId().getDataAsJson()

	allCounts := args.resolvedInput
	countsSpec := allCounts.spec

	roundColumn := args.resolvedRoundColumn
	roundOrder := args.roundOrder

	// covariates := []
	// for _, v in args.metaRefs {
	// 	covariates = append(covariates, v)
	// }
	
	// convert PColumns to csv
	csvCounts := xsv.exportFrame([allCounts], "csv", {})
	csvCovariates := xsv.exportFrame([roundColumn], "csv", {})

	calculateEnrichment := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.clonotype-enrichment.software:calculate-enrichment")).
		addFile("rawCounts.csv", csvCounts).
		addFile("covariates.csv", csvCovariates).
		arg("--counts").arg("rawCounts.csv").
		arg("--metadata").arg("covariates.csv").
		arg("--condition_column").arg(string(roundColumn.spec.annotations["pl7.app/label"])).
		arg("--conditions").arg(string(roundOrder)).
		arg("--enrichment").arg("enrichment_results.csv").
		arg("--volcano").arg("volcano_data.csv").
		arg("--bubble").arg("bubble_data.csv").
		saveFile("enrichment_results.csv").
		saveFile("volcano_data.csv").
		saveFile("bubble_data.csv").
		printErrStreamToStdout().
		saveStdoutContent().
		cache(24 * 60 * 60 * 1000).
		run()

	EnrichmentImportParams := pfEnrichmentConv.getColumns(countsSpec)
	enrichmentPf := xsv.importFile(calculateEnrichment.getFile("enrichment_results.csv"), "csv", EnrichmentImportParams)

	return {
		outputs: {
			enrichmentPf: pframes.exportFrame(enrichmentPf)
		},
		exports: {}
	}
	
})

